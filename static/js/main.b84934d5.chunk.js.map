{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","utils/API.js","components/Container/EmployeesContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onSubmit","handleFormSubmit","value","name","onChange","handleInputChange","type","placeholder","axios","get","EmployeesContainer","state","search","employees","filteredEmployees","direction","phone","email","dob","event","target","setState","filterEmployees","toLowerCase","trim","preventDefault","sortBy","key","primary","secondary","sortedEmployees","sort","a","b","localeCompare","console","log","input","filter","employee","first","includes","last","API","then","res","data","results","catch","err","this","scope","data-field","data-sortable","onClick","map","fullName","date","Date","push","getMonth","slice","getDate","getFullYear","join","login","uuid","src","picture","thumbnail","alt","cell","href","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b84934d5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"text-center\">Employee Directory</h1>\n      <p className=\"text-center\">\n        Click on column headers to filter by heading or use the search box to narrow\n        your results.\n      </p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst SearchBar = (props) => {\n  // Setting the component's initial state\n\n  return (\n    <nav className=\"navbar navbar-light bg-light justify-content-center\">\n      <form className=\"form-inline m-2\" onSubmit={props.handleFormSubmit}>\n        <input\n          className=\"form-control\"\n          value={props.value}\n          name=\"search\"\n          onChange={props.handleInputChange}\n          type=\"search\"\n          placeholder=\"Search\"\n        />\n      </form>\n    </nav>\n  );\n};\n\nexport default SearchBar;\n","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=50&nat=us\"\n\nexport default {\n    getEmployees: function() {\n        return axios.get(URL);\n    }\n}","import React, { Component } from \"react\";\nimport SearchBar from \"../SearchBar\";\nimport API from \"../../utils/API\";\n\nclass EmployeesContainer extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n    direction: {\n      name: \"asc\",\n      phone: \"acs\",\n      email: \"asc\",\n      dob: \"asc\",\n    },\n  };\n\n  // When this component mounts, load random users as employees from https://randomuser.me/\n  componentDidMount() {\n    API.getEmployees()\n      .then((res) =>\n        this.setState({\n          employees: res.data.results,\n          filteredEmployees: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  }\n\n  // Update search state to filter by employee name\n  handleInputChange = (event) => {\n    const value = event.target.value;\n    this.setState({ search: value });\n    this.filterEmployees(value.toLowerCase().trim());\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n  };\n\n  //   sortEmployees = (field, property, backup) => {\n  //     let sortEmployees = [...this.state.employees].sort((a, b) => {\n  //       let x = a[field][property].toLowerCase();\n  //       let y = b[field][property].toLowerCase();\n\n  //       if (backup && x === y) {\n  //         x = a[field][backup].toLowerCase();\n  //         y = b[field][backup].toLowerCase();\n  //         return x.localeCompare(y);\n  //       }\n\n  //       return x.localeCompare(y);\n  //     });\n\n  //     if (this.state.sortedEmployees !== sortEmployees) {\n  //       sortEmployees = this.state.sortedEmployees.sort(() => -1);\n  //     }\n\n  //     this.setState({\n  //       sortedEmployees: sortEmployees,\n  //     });\n  //   };\n\n  // Sort with the key of specified object, primary: first sortable property, secondary: optional second sort i.e. sort by last name, then first.\n  sortBy = (key, primary, secondary) => {\n    const sortedEmployees = this.state.filteredEmployees.sort((a, b) => {\n      a = a[key]\n      b = b[key]\n\n      // If secondary comparison given and primary comparison is equal\n      if (secondary && a[primary] === b[primary]) {\n        return a[secondary].localeCompare(secondary);\n      }\n\n      return a[primary].localeCompare(b[primary]);\n    });\n\n    console.log(sortedEmployees);\n\n    this.setState({\n      filteredEmployees: sortedEmployees,\n    });\n  };\n\n  filterEmployees = (input) => {\n    if (input) {\n      this.setState({\n        filteredEmployees: this.state.employees.filter((employee) => {\n          return (\n            employee.name.first.toLowerCase().includes(input) ||\n            employee.name.last.toLowerCase().includes(input)\n          );\n        }),\n      });\n    } else {\n      this.setState({ filteredEmployees: this.state.employees });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <SearchBar\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <div className=\"container\">\n          <table className=\"table table-striped table-sortable text-center mt-5\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\" data-field=\"name\" data-sortable=\"true\">\n                  <span onClick={() => this.sortBy(\"name\", \"last\", \"first\")}>Name</span>\n                </th>\n                <th scope=\"col\">\n                  <span onClick={() => console.log(\"Sort by phone number\")}>\n                    Phone\n                  </span>\n                </th>\n                <th scope=\"col\">\n                  <span onClick={() => console.log(\"Sort by email\")}>\n                    Email\n                  </span>\n                </th>\n                <th scope=\"col\">\n                  <span onClick={() => console.log(\"Sort by dob\")}>DOB</span>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.filteredEmployees.map((employee) => {\n                const { first, last } = employee.name;\n                const fullName = `${first} ${last}`;\n\n                // Format date\n                const date = new Date(employee.dob.date);\n                let dob = [];\n                dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n                dob.push((\"0\" + date.getDate()).slice(-2));\n                dob.push(date.getFullYear());\n\n                // Join formatted date\n                dob = dob.join(\"-\");\n\n                return (\n                  <tr key={employee.login.uuid}>\n                    <th scope=\"row\">\n                      <img src={employee.picture.thumbnail} alt={fullName} />\n                    </th>\n                    <td>{fullName}</td>\n                    <td>{employee.cell}</td>\n                    <td>\n                      <a href={`mailto:${employee.email}`}>{employee.email}</a>\n                    </td>\n                    <td>{dob}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default EmployeesContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport EmployeesContainer from \"./components/Container/EmployeesContainer\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <EmployeesContainer />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}