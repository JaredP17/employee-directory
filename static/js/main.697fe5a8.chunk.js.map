{"version":3,"sources":["components/Header/index.jsx","components/SearchBar/index.jsx","utils/API.js","components/Container/Employees.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBar","props","onChange","handleInputChange","value","search","name","type","placeholder","id","axios","get","Employees","state","employees","filteredEmployees","API","then","res","setState","data","results","catch","err","console","log","scope","this","map","employee","first","last","fullName","date","Date","dob","push","getMonth","slice","getDate","getFullYear","join","src","picture","thumbnail","alt","cell","email","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8QAeeA,G,YAZA,WACb,OACE,gCACE,wBAAIC,UAAU,eAAd,sBACA,uBAAGA,UAAU,eAAb,0F,gCCgBSC,G,MApBG,SAACC,GAGjB,OACE,yBAAKF,UAAU,uDACb,0BAAMA,UAAU,mBACd,2BACEG,SAAUD,EAAME,kBAChBC,MAAOH,EAAMI,OACbN,UAAU,eACVO,KAAK,SACLC,KAAK,SACLC,YAAY,SACZC,GAAG,e,iBCZE,EACG,WACV,OAAOC,IAAMC,IAJT,iDC6DGC,E,4MA1DbC,MAAQ,CACNR,OAAQ,GACRS,UAAW,GACXC,kBAAmB,I,kEAIA,IAAD,OAClBC,IACGC,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAAEL,UAAWI,EAAIE,KAAKC,aAClDC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAI9B,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,aACb,2BAAOA,UAAU,wCACf,+BACE,4BACE,wBAAI2B,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGC,KAAKd,MAAMC,UAAUc,KAAI,SAACC,GAAc,IAAD,EACdA,EAASvB,KAAxBwB,EAD6B,EAC7BA,MAAOC,EADsB,EACtBA,KACRC,EAAQ,UAAMF,EAAN,YAAeC,GACvBE,EAAO,IAAIC,KAAKL,EAASM,IAAIF,MAC/BE,EAAM,GAKZ,OAJEA,EAAIC,MAAM,KAAOH,EAAKI,WAAa,IAAIC,OAAO,IAC9CH,EAAIC,MAAM,IAAMH,EAAKM,WAAWD,OAAO,IACvCH,EAAIC,KAAKH,EAAKO,eACdL,EAAMA,EAAIM,KAAK,KAEf,4BACE,wBAAIf,MAAM,OACR,yBAAKgB,IAAKb,EAASc,QAAQC,UAAWC,IAAKb,KAE7C,4BAAKA,GACL,4BAAKH,EAASiB,MACd,4BAAKjB,EAASkB,OACd,4BAAKZ,e,GA/CDa,aCUTC,EATH,WACV,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd1C,OAAM,SAAA2C,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.697fe5a8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"text-center\">Employee Directory</h1>\n      <p className=\"text-center\">\n        Click on carrots to filter by heading or use the search box to narrow\n        your results.\n      </p>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst SearchBar = (props) => {\n  // Setting the component's initial state\n\n  return (\n    <nav className=\"navbar navbar-light bg-light justify-content-center\">\n      <form className=\"form-inline m-2\">\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          className=\"form-control\"\n          name=\"search\"\n          type=\"search\"\n          placeholder=\"Search\"\n          id=\"search\"\n        />\n      </form>\n    </nav>\n  );\n};\n\nexport default SearchBar;\n","import axios from \"axios\";\n\nconst URL = \"https://randomuser.me/api/?results=50&nat=us\"\n\nexport default {\n    getEmployees: function() {\n        return axios.get(URL);\n    }\n}","import React, { Component } from \"react\";\nimport SearchBar from \"../SearchBar\";\nimport API from \"../../utils/API\";\n\nclass Employees extends Component {\n  state = {\n    search: \"\",\n    employees: [],\n    filteredEmployees: [],\n  };\n\n  // When this component mounts, search the Giphy API for pictures of kittens\n  componentDidMount() {\n    API.getEmployees()\n      .then((res) => this.setState({ employees: res.data.results }))\n      .catch((err) => console.log(err));\n  }\n\n  render() {\n    return (\n      <>\n        <SearchBar />\n        <div className=\"container\">\n          <table className=\"table table-striped text-center mt-5\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Phone</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">DOB</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.employees.map((employee) => {\n                  const {first, last} = employee.name;\n                  const fullName = `${first} ${last}`;\n                  const date = new Date(employee.dob.date);\n                  let dob = [];\n                  dob.push((\"0\" + (date.getMonth() + 1)).slice(-2));\n                  dob.push((\"0\" + date.getDate()).slice(-2));\n                  dob.push(date.getFullYear());\n                  dob = dob.join(\"-\");\n                return (\n                  <tr>\n                    <th scope=\"row\">\n                      <img src={employee.picture.thumbnail} alt={fullName} />\n                    </th>\n                    <td>{fullName}</td>\n                    <td>{employee.cell}</td>\n                    <td>{employee.email}</td>\n                    <td>{dob}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Employees;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Employees from \"./components/Container/Employees\";\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <Employees />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}